name: ci-workflow
on: [push]

env:
  WEBRTC_RELEASE: M112
  WEBRTC_BRANCH_HEAD: branch-heads/5615
  WEBRTC_REPOSITORY: https://chromium.googlesource.com/external/webrtc/
  DEPOT_TOOLS_REPOSITORY: https://chromium.googlesource.com/chromium/tools/depot_tools

jobs:
  pre_build:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.fetch-revision.outputs.revision }}
    steps:
      - id: fetch-revision
        name: Get WebRTC release revision
        run: |
          GIT_COMMIT=$(git ls-remote ${WEBRTC_REPOSITORY} --heads ${WEBRTC_BRANCH_HEAD} |cut -c -40)
          echo "WebRTC release:     ${WEBRTC_RELEASE}"
          echo "WebRTC branch head: ${WEBRTC_BRANCH_HEAD}"
          echo "WebRTC repository:  ${WEBRTC_REPOSITORY}"
          echo "WebRTC git commit:  ${GIT_COMMIT}"

          echo "revision=${GIT_COMMIT}" >> $GITHUB_OUTPUT

  build:
    needs: pre_build
    outputs:
      ios-archs: ${{ steps.ios-archs.outputs.archs }}
      android-archs: ${{ steps.android-archs.outputs.archs }}
    strategy:
      # max-parallel: 2
      matrix:
        include:
          - os: linux
            cpu: x64
            tag: -DataChannel
            gnargs: >-
              is_clang=false
              libyuv_use_neon=false
              rtc_enable_protobuf=false
              rtc_build_with_neon=false
              rtc_include_internal_audio_device=false
              rtc_include_pulse_audio=false
              rtc_libvpx_build_vp9=false
              rtc_use_gtk=false
              use_aura=false
              use_custom_libcxx=false
              use_dbus=false
              use_gold=true
              use_goma=false
              use_lld=false
              use_ozone=false
              use_udev=false
              use_glib=false
              rtc_use_x11=false
              use_x11=false
              rtc_use_pipewire=false
              enable_paint_preview=false
              libyuv_disable_jpeg=true
              libyuv_use_gflags=false
              enable_libaom=false
              rtc_enable_libevent=false
              rtc_build_libevent=false
              rtc_exclude_audio_processing_module=true
              rtc_include_builtin_audio_codecs=false
              rtc_include_builtin_video_codecs=false
              libyuv_use_neon=false
              rtc_enable_avx2=false
              rtc_enable_sctp=true
              rtc_use_h264=false
              rtc_build_libsrtp=true
              rtc_build_libvpx=false
              rtc_build_opus=false
              rtc_include_ilbc=false
              rtc_include_opus=false
              rtc_enable_protobuf=false
              toolkit_views=false
              libyuv_include_tests=false
            target_os: '["linux"]'
            runs_on: ubuntu-22.04

          # - os: android
          #   cpu: arm
          #   gnargs: is_component_ffmpeg=true proprietary_codecs=true
          #   target_os: '["linux", "android"]'
          #   runs_on: ubuntu-22.04
          # - os: android
          #   cpu: arm64
          #   gnargs: is_component_ffmpeg=true proprietary_codecs=true
          #   target_os: '["linux", "android"]'
          #   runs_on: ubuntu-22.04
          # - os: android
          #   cpu: x86
          #   gnargs: is_component_ffmpeg=true proprietary_codecs=true
          #   target_os: '["linux", "android"]'
          #   runs_on: ubuntu-22.04
          # - os: android
          #   cpu: x64
          #   gnargs: is_component_ffmpeg=true proprietary_codecs=true
          #   target_os: '["linux", "android"]'
          #   runs_on: ubuntu-22.04

          # - os: ios
          #   cpu: arm64
          #   headers: true
          #   gnargs: proprietary_codecs=true ios_enable_code_signing=false
          #   target_os: '["ios", "mac"]'
          #   runs_on: macos-latest

          # - os: mac
          #   cpu: x64
          #   headers: true
          #   gnargs: proprietary_codecs=true ios_enable_code_signing=false
          #   target_os: '["ios", "mac"]'
          #   runs_on: macos-latest

    runs-on: ${{ matrix.runs_on }}

    env:
      OUTPUT_NAME: WebRTC${{ matrix.tag }}-${{WEBRTC_RELEASE}}-${{ matrix.os }}-${{ matrix.cpu }}
      GNARGS: >-
        target_os="${{ matrix.os }}"
        target_cpu="${{ matrix.cpu }}"
        ffmpeg_branding="Chrome"
        symbol_level=0
        is_debug=false
        is_component_build=false
        strip_debug_info=true
        enable_stripping=true
        enable_iterator_debugging=false
        enable_profiling=false
        use_rtti=true
        rtc_include_tests=false
        rtc_build_tools=false
        rtc_build_examples=false
        treat_warnings_as_errors=false
        ${{ matrix.gnargs }}

    steps:
      # - name: Maximize build space
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 512
      #     swap-size-mb: 1024
      #     remove-dotnet: true
      #     remove-codeql: true

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Checkout depot_tools
        run: |
          git clone -v ${DEPOT_TOOLS_REPOSITORY} depot_tools
          echo "$(pwd)/depot_tools" >> $GITHUB_PATH

      - name: Show build environments
        run: |
          echo "Free disk space:"
          df -h
          echo "Build environment variables:"
          export

      - name: Checkout WebRTC
        run: |
          set -x
          gclient config --name src --unmanaged ${WEBRTC_REPOSITORY}
          echo 'target_os = ${{ matrix.target_os }}' >> .gclient
          gclient sync --no_bootstrap --shallow --no-history -vv --revision ${{ needs.pre_build.outputs.revision }}

      - name: Configure WebRTC
        run: |
          set -x
          cd ${GITHUB_WORKSPACE}/src
          gn gen out --args="${GNARGS}"

      - name: Compile WebRTC
        run: |
          set -x
          cd ${GITHUB_WORKSPACE}/src
          ninja -v -C out

      # - name: Show iOS artifacts
      #   if: ${{ matrix.os == 'ios' }}
      #   run: |
      #     ls -laR ${GITHUB_WORKSPACE}/src/out/

      # - name: build for iphoneos
      #   if: ${{ matrix.target_os == 'iphoneos' }}
      #   run: echo ok

      - name: Upload JAR & JNI library
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'android' }}
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: |
            src/out/lib.java/sdk/android/libwebrtc.jar 
            src/out/libjingle_peerconnection_so.so

      - name: Upload framework
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'mac' || matrix.os == 'ios' }}
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: |
            src/out/WebRTC.framework

      - name: Upload static libraries
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'linux' || matrix.os == 'mac' }}
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: |
            src/out/obj/libwebrtc.a

      - name: Upload headers
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'linux' || matrix.os == 'mac' }}
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: |
            src/**/*.h
            !src/out
            !src/ios
            !src/sdk
            !src/examples
            !src/test
            !src/build
            !src/buildtools
            !src/third_party/blink
            !src/third_party/llvm-build
            !src/third_party/win_build_output
            !src/third_party/android_ndk
            !src/third_party/catapult
            !src/third_party/googletest
            !src/third_party/android_deps
            !src/third_party/android_sdk
            !src/third_party/crashpad
            !src/third_party/perfetto
            !src/third_party/hunspell
            !src/third_party/icu
            !src/third_party/khronos
          retention-days: 5

  pre_artifacts:
    needs: 
      - build
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.generate-file-list.outputs.revision }}

    steps:
      - name: Generate File List
        id: generate-file-list
        run: |
          # Initialize an empty array to store the file names
          files=()

          # Loop through the matrix configuration and build the file names
          for os in "${{ matrix.os }}"; do
            for cpu in "${{ matrix.cpu }}"; do
              for tag in "${{ matrix.tag }}"; do
                file_name="WebRTC${{ matrix.tag }}-${{ env.WEBRTC_RELEASE }}-${{ matrix.os }}-${{ matrix.cpu }}.zip"
                files+=("$file_name")
                done
            done
          done

          # Output the list of file names as a space-separated string
          # echo "::set-output name=file_list::${files[*]}"
          echo "file_list=${files[*]}" >> $GITHUB_OUTPUT

  artifacts:
    needs: 
      - pre_artifacts

    runs-on: ubuntu-latest

    steps:
      - name: Download Android Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.android-archs }}

      - name: Download iOS Artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.ios-archs }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ needs.pre_artifacts.outputs.files }}
          tag_name: v1.0  # Replace with the desired tag name
          title: Release v1.0  # Replace with the desired release title
          body: |
            Release notes for v1.0  # Replace with the release notes

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          release_name: WebRTC-${{ env.WEBRTC_RELEASE }}
          files: ${{ needs.pre_artifacts.outputs.files }}
          tag_name: v1.0  # Replace with the desired tag name
          title: Release v1.0  # Replace with the desired release title
          body: |
            Release notes for v1.0  # Replace with the release notes
          publish: true

  # release:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Draft a release
  #       # if: github.ref == 'refs/heads/master'
  #       uses: actions/create-release@v1
  #       id: create_release
  #       with:
  #         draft: true
  #         prerelease: true
  #         release_name: WebRTC-${{ env.WEBRTC_RELEASE }}
  #         # tag_name: ${{ github.ref }}
  # #        body_path: CHANGELOG.md
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}