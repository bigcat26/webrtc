name: ci-workflow
on: [push]

env:
  WEBRTC_RELEASE: M112
  WEBRTC_BRANCH_HEAD: branch-heads/5615
  WEBRTC_REPOSITORY: https://chromium.googlesource.com/external/webrtc/
  DEPOT_TOOLS_REPOSITORY: https://chromium.googlesource.com/chromium/tools/depot_tools

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.fetch-revision.outputs.revision }}
    steps:
      - id: fetch-revision
        name: Get WebRTC release revision
        run: |
          GIT_COMMIT=$(git ls-remote ${WEBRTC_REPOSITORY} --heads ${WEBRTC_BRANCH_HEAD} |cut -c -40)
          echo "WebRTC release:     ${WEBRTC_RELEASE}"
          echo "WebRTC branch head: ${WEBRTC_BRANCH_HEAD}"
          echo "WebRTC repository:  ${WEBRTC_REPOSITORY}"
          echo "WebRTC git commit:  ${GIT_COMMIT}"

          echo "revision=${GIT_COMMIT}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    strategy:
      max-parallel: 2
      matrix:
        include:
          - os: linux
            arch: x64
            tag: -DataChannel
            headers: true
            gnargs: >-
              is_clang=false
              libyuv_use_neon=false
              rtc_enable_protobuf=false
              rtc_build_with_neon=false
              rtc_include_internal_audio_device=false
              rtc_include_pulse_audio=false
              rtc_libvpx_build_vp9=false
              rtc_use_gtk=false
              use_aura=false
              use_custom_libcxx=false
              use_dbus=false
              use_gold=true
              use_goma=false
              use_lld=false
              use_ozone=false
              use_udev=false
              use_glib=false
              rtc_use_x11=false
              use_x11=false
              rtc_use_pipewire=false
              enable_paint_preview=false
              libyuv_disable_jpeg=true
              libyuv_use_gflags=false
              enable_libaom=false
              rtc_enable_libevent=false
              rtc_build_libevent=false
              rtc_exclude_audio_processing_module=true
              rtc_include_builtin_audio_codecs=false
              rtc_include_builtin_video_codecs=false
              libyuv_use_neon=false
              rtc_enable_avx2=false
              rtc_enable_sctp=true
              rtc_use_h264=false
              rtc_build_libsrtp=true
              rtc_build_libvpx=false
              rtc_build_opus=false
              rtc_include_ilbc=false
              rtc_include_opus=false
              rtc_enable_protobuf=false
              toolkit_views=false
              libyuv_include_tests=false
            target_os: '["linux"]'
            runs_on: ubuntu-22.04

          - os: android
            cpu: arm
            gnargs: >-
              is_component_ffmpeg=true
              proprietary_codecs=true
            target_os: '["linux", "android"]'
            runs_on: ubuntu-22.04
            artifacts: >-
              out/lib.java/sdk/android
              out/libjingle_peerconnection_so.so

          - os: android
            cpu: arm64
            gnargs: >-
              is_component_ffmpeg=true
              proprietary_codecs=true
            target_os: '["linux", "android"]'
            runs_on: ubuntu-22.04
            artifacts: >-
              out/lib.java/sdk/android
              out/libjingle_peerconnection_so.so

    runs-on: ${{ matrix.runs_on }}

    env:
      OUTPUT_NAME: WebRTC${{ matrix.tag }}-${WEBRTC_RELEASE}-${{ matrix.os }}-${{ matrix.cpu }}
      GNARGS: >-
        target_os="${{ matrix.os }}"
        target_cpu="${{ matrix.cpu }}"
        ffmpeg_branding="Chrome"
        symbol_level=0
        is_debug=false
        is_component_build=false
        strip_debug_info=true
        enable_stripping=true
        enable_iterator_debugging=false
        enable_profiling=false
        use_rtti=true
        rtc_include_tests=false
        rtc_build_tools=false
        rtc_build_examples=false
        treat_warnings_as_errors=false
        ${{ matrix.gnargs }}
      HEADER_EXCLUDES: >-
        out
        ios
        sdk
        examples
        test
        build
        buildtools
        third_party/blink
        third_party/llvm-build
        third_party/win_build_output
        third_party/android_ndk
        third_party/catapult
        third_party/googletest
        third_party/android_deps
        third_party/android_sdk
        third_party/crashpad
        third_party/perfetto
        third_party/hunspell
        third_party/icu
        third_party/khronos

    steps:
      # - name: Maximize build space
      #   uses: easimon/maximize-build-space@master
      #   with:
      #     root-reserve-mb: 512
      #     swap-size-mb: 1024
      #     remove-dotnet: true
      #     remove-codeql: true

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Checkout depot_tools
        run: |
          git clone -v ${DEPOT_TOOLS_REPOSITORY} depot_tools
          echo "$(pwd)/depot_tools" >> $GITHUB_PATH

      - name: Show build environments
        run: |
          echo "Free disk space:"
          df -h
          echo "Build environment variables:"
          export

      - name: Checkout WebRTC
        run: |
          set -x
          gclient config --name src --unmanaged ${WEBRTC_REPOSITORY}
          echo 'target_os = ${{ matrix.target_os }}' >> .gclient
          gclient sync --no_bootstrap --shallow --no-history -vv --revision ${{ needs.prepare.outputs.revision }}
          echo "${{ matrix.headers }}"

      - name: Configure WebRTC
        run: |
          set -x
          cd ${GITHUB_WORKSPACE}/src
          gn gen out --args="${GNARGS}"

      - name: Compile WebRTC
        run: |
          set -x
          cd ${GITHUB_WORKSPACE}/src
          ninja -v -C out

      - name: Archive WebRTC header files
        if: ${{ matrix.headers == true }}
        run: |
          set -x

          cd ${GITHUB_WORKSPACE}/src
          for excluded in ${HEADER_EXCLUDES}; do
            FIND_ARGS="$FIND_ARGS -path $excluded -prune -o"
          done
          find . -type f -name '*.h' ${FIND_ARGS} -print -exec tar rf webrtc-headers.tar {} \;

      - name: Archive artifacts
        run: |
          set -x
          cd ${GITHUB_WORKSPACE}/src

          for included in ${{ matrix.artifacts }}; do
            tar rf ${OUTPUT_NAME}.tar ${included}
          done

          bzip2 ${OUTPUT_NAME}.tar

      # - name: build for iphoneos
      #   if: ${{ matrix.target_os == 'iphoneos' }}
      #   run: echo ok

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.OUTPUT_NAME }}
          path: ${{ env.GITHUB_WORKSPACE }}/src/${{ env.OUTPUT_NAME }}.tar.bz2
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: draft a release
        if: github.ref == 'refs/heads/master'
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: true
          release_name: WebRTC-${WEBRTC_RELEASE}
          # tag_name: ${{ github.ref }}
  #        body_path: CHANGELOG.md
